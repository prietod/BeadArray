#!/usr/bin/env bash

BASE="$(readlink -f $(readlink -f $(dirname "${BASH_SOURCE}")/..))"

check_have_group() {
  local group=$1
  local id_output=$( id )
  if ! echo ${id_output} | grep -q "\<${group}\>"; then
    error "Exiting. Node dropped '${group}' group ownership in session, data inaccessible. id-output: ${id_output}"
  fi
}

clear_previous_job() {
  for f in \
    $COMPLETE_DIR/$CODE_NAME/$CHIP_BARCODE.txt \
    $FAILED_DIR/$CODE_NAME/$CHIP_BARCODE.txt \
    $RAW_QC_DIR; do

    [[ -e $f ]] && rm -rf $f
  done
}

error_and_exit() {
  local msg=$1
  echo "Error: $msg" | tee $FAILED_DIR/$CODE_NAME/$CHIP_BARCODE.txt 1>&2
  exit 1
}

mark_job_complete() {
  date +%FT%T > $COMPLETE_DIR/$CODE_NAME/$CHIP_BARCODE.txt
}

setup_dirs() {
  [[ -d $COMPLETE_DIR/$CODE_NAME ]] || mkdir -p $COMPLETE_DIR/$CODE_NAME
  [[ -d $FAILED_DIR/$CODE_NAME ]] || mkdir -p $FAILED_DIR/$CODE_NAME
  [[ -d $RAW_QC_DIR ]] mkdir -p $RAW_QC_DIR
}

usage() {
  echo "Usage: $( basename $0 ) <code> [chip_barcode]" 1>&2
  exit 1
}

R_VERSION=${R_VERSION:-3.2.3}

SOURCE_DATA_DIR="${SOURCE_DATA_DIR:-/hiidata/teddy/data/jinfiniti/gene_expression}"

MAP_INFO="${MAP_INFO:-$SOURCE_DATA_DIR/map_info.txt}"

DEST_DATA_DIR="${DEST_DATA_DIR:-$BASE/tmp/data}"

WORK_DIR="${WORK_DIR:-$BASE/tmp/work}"

COMPLETE_DIR="${COMPLETE_DIR:-$BASE/tmp/complete}"

FAILED_DIR="${FAILED_DIR:-$BASE/tmp/failed}"

DEFAULT_CHIP_BARCODE="${DEFAULT_CHIP_BARCODE:-3998755068}" # for easy testing

#---------------------------------------------------------------
# main
#---------------------------------------------------------------

[[ $# < 1 ]] && usage

CODE=$1

CHIP_BARCODE="${2:-$DEFAULT_CHIP_BARCODE}"

CODE_NAME=$( basename $CODE .R )

RAW_QC_DIR=$WORK_DIR/$CODE_NAME/$CHIP_BARCODE/raw/qc

clear_previous_job

setup_dirs

module load apps/R/${R_VERSION}

R --slave --quiet --no-restore --no-save --args $DEST_DATA_DIR/$CHIP_BARCODE $RAW_QC_DIR < $CODE

rc=$?

if [[ $rc == 0 ]]; then
  mark_job_complete
else
  error_and_exit "R failed with return code: $rc"
fi
