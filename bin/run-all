#!/usr/bin/env bash

export BASE="$(readlink -f $(dirname "${BASH_SOURCE}")/..)"

source ${BASE}/lib/env.sh
source ${BASE}/lib/util.sh

install-R-libs() {
  if ! [[ -d ${R_LIBS} ]]; then
    mkdir -p ${R_LIBS}
    ${BASE}/bin/run-R ${BASE}/bin/util/install-R-libs.R
  fi
}

generate-raw-chip-list() {
  ensure_dir $(dirname ${RAW_CHIP_LIST})
  if [[ "$TEST_MODE" == 'true' ]]; then
     $BASE/bin/util/generate-chip-list ${JINFINITI_DATA_DIR}/map_info.txt \
       | sort --random-sort | head -8 > ${RAW_CHIP_LIST}
   else
     $BASE/bin/util/generate-chip-list ${JINFINITI_DATA_DIR}/map_info.txt > ${RAW_CHIP_LIST}
  fi
}

# Copy raw Jinifiti data from the original source directory
#
copy-raw-data() {
  ensure_dir ${RAW_DATA_DIR}
  ${BASE}/bin/util/copy-data ${RAW_CHIP_LIST} ${RAW_DATA_EXCLUDE_PATTERNS} ${JINFINITI_DATA_DIR} ${RAW_DATA_DIR}
}

# Run QC scripts again raw data
#
run-raw-qc() {
  ensure_dir ${WORK_DIR}/raw-qc
  ensure_dir ${WORK_DIR}/raw-qc-average

  local array_count="$(line_count ${RAW_CHIP_LIST})"

  sbatch-submit "raw-qc" \
    "--array=1-${array_count} --mem=16G --cpus-per-task=2 --time=0-04:00:00" \
    "${BASE}/sbatch/raw-qc" "${BASE}/code/BeadArray-qc.R" "${WORK_DIR}/raw-qc"

  sbatch-submit "raw-qc-average" \
    "--array=1-${array_count} --mem=16G --cpus-per-task=2 --time=0-04:00:00" \
    "${BASE}/sbatch/raw-qc" "${BASE}/code/BeadArray-qc-average.R" "${WORK_DIR}/raw-qc-average"
}

combine-qc-details() {
  [[ -z "$DEP_OFF" ]] && local sbatch_args="--dependency=afterok:$(get_job_ids 'raw-qc' 'raw-qc-average')"

  sbatch-submit "combine-qc-details" \
    "${sbatch_args} --mem=16G --cpus-per-task=2 --time=0-01:00:00" \
    "${BASE}/sbatch/combine-qc-details"
}

sample-filter() {
  [[ -z "$DEP_OFF" ]] && local sbatch_args="--dependency=afterok:$(get_job_ids 'combine-qc-details')"

  sbatch-submit "sample-filter-qc" \
    "${sbatch_args} --mem=32G --cpus-per-task=4 --time=0-01:00:00" \
    "${BASE}/bin/run-R" \
      ${BASE}/code/BeadArray-sample-filter.R \
      ${WORK_DIR}/raw-qc/combined \
      raw-qc-details.txt

  sbatch-submit "sample-filter-qc-average" \
    "${sbatch_args} --mem=32G --cpus-per-task=4 --time=0-01:00:00" \
    "${BASE}/bin/run-R" \
      ${BASE}/code/BeadArray-sample-filter.R \
      ${WORK_DIR}/raw-qc-average/combined \
      raw-qc-details.txt
}

copy-filtered-data() {
  [[ -z "$DEP_OFF" ]] && local sbatch_args="--dependency=afterok:$(get_job_ids 'sample-filter-qc' 'sample-filter-qc-average')"

  sbatch-submit "copy-filtered-data" \
    "${sbatch_args} --mem=32G --cpus-per-task=4 --time=0-01:00:00" \
    "${BASE}/sbatch/copy-filtered-data"
}

methods-step-1() {
  [[ -z "$DEP_OFF" ]] && local sbatch_args="--dependency=afterok:$(get_job_ids 'copy-filtered-data')"

  sbatch-submit "submit-methods-step-1" \
    "${sbatch_args} --mem=4G --cpus-per-task=1 --time=0-01:00:00" \
    "${BASE}/sbatch/methods-step-1-submit"
}

combine-expression() {
  [[ -z "$DEP_OFF" ]] && local sbatch_args="--dependency=afterok:$(get_job_ids 'methods-step-1')"

  sbatch-submit "combine-expression" \
    "${sbatch_args} --mem=4G --cpus-per-task=1 --time=0-01:00:00" \
    "${BASE}/sbatch/combine-expression-submit"
}

phenotype-details() {
  [[ -z "$DEP_OFF" ]] && local sbatch_args="--dependency=afterok:$(get_job_ids 'combine-expression')"

  sbatch-submit "phenotype-details" \
    "${sbatch_args} --mem=32G --cpus-per-task=2 --time=0-01:00:00" \
    "${BASE}/sbatch/transform-cols-added"
}

#------------------------------------------------------------------------------------
# Main
#------------------------------------------------------------------------------------

#------------------------------------------------------------------------------------
# Install supporting R libraries in $R_LIBS (bioconductor.org w/ lumi and beadarray)
#------------------------------------------------------------------------------------

run "install-R-libs"

#------------------------------------------------------------------------------------
# Generate a simple list of chip barcodes from the metadata file provided by Jinifiti
#------------------------------------------------------------------------------------

run "generate-raw-chip-list"

#------------------------------------------------------------------------------------
# Copy each chip into a raw data folder
#------------------------------------------------------------------------------------

run "copy-raw-data"

#------------------------------------------------------------------------------------
# Run raw-qc and raw-qc-average R Scripts to determine quality
#------------------------------------------------------------------------------------

run "run-raw-qc"

#------------------------------------------------------------------------------------
# Combine individual chip QC scores for each qc method into aggregate files
#------------------------------------------------------------------------------------

run "combine-qc-details"

#------------------------------------------------------------------------------------
# Run R script to generate a list of <chip>_<array> candidates to remove due to
# qc scoring.
#------------------------------------------------------------------------------------

run "sample-filter"

#------------------------------------------------------------------------------------
# Copy over <chip>_<array> files which passed QC into all, donor, and non-donor
# filtered data folders.
#------------------------------------------------------------------------------------

run "copy-filtered-data"

#------------------------------------------------------------------------------------
# Submit method-a-step1, method-b-step-1, etc. for all, donor, and non-donor filtered
# data folders.
#------------------------------------------------------------------------------------

run "methods-step-1"


#------------------------------------------------------------------------------------
# Combine expression files for each chip for each method-a-step1, method-b-step-1,
# etc. for all, donor, and non-donor filtered data folders.
#------------------------------------------------------------------------------------

run "combine-expression"

#------------------------------------------------------------------------------------
# Generate phenotype_details files for all, donor, and non-donor for methods-step-2
#------------------------------------------------------------------------------------

run "phenotype-details"

#------------------------------------------------------------------------------------
# run "methods-step-2"

