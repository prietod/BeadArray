#!/usr/bin/env bash

export BASE="$(readlink -f $(dirname "${BASH_SOURCE}")/..)"

source ${BASE}/lib/env.sh
source ${BASE}/lib/util.sh

# Generate a simple list of chip barcodes from the metadata file provided by Jinifiti
#
generate-raw-chip-list() {
  ensure_dir $(dirname ${RAW_CHIP_LIST})
  if [[ "$TEST_MODE" == 'true' ]]; then
     $BASE/bin/util/generate-chip-list ${JINFINITI_DATA_DIR}/map_info.txt \
       | sort --random-sort | head -8 > ${RAW_CHIP_LIST}
   else
     $BASE/bin/util/generate-chip-list ${JINFINITI_DATA_DIR}/map_info.txt > ${RAW_CHIP_LIST}
  fi
}

# Copy raw Jinifiti data from the original source directory
#
copy-raw-data() {
  ensure_dir ${RAW_DATA_DIR}
  ${BASE}/bin/util/copy-data ${RAW_CHIP_LIST} ${RAW_DATA_EXCLUDE_PATTERNS} ${JINFINITI_DATA_DIR} ${RAW_DATA_DIR}
}

# Run QC scripts again raw data
#
run-raw-qc() {
  ensure_dir ${WORK_DIR}/raw-qc
  ensure_dir ${WORK_DIR}/raw-qc-average

  local array_count="$(line_count ${RAW_CHIP_LIST})"

  sbatch-submit "raw-qc" \
    "--array=1-${array_count} --mem=16G --cpus-per-task=2 --time=0-04:00:00" \
    "${BASE}/sbatch/raw-qc" "${BASE}/code/BeadArray_qc.R" "${WORK_DIR}/raw-qc"

  sbatch-submit "raw-qc-average" \
    "--array=1-${array_count} --mem=16G --cpus-per-task=2 --time=0-04:00:00" \
    "${BASE}/sbatch/raw-qc" "${BASE}/code/BeadArray_qc_average.R" "${WORK_DIR}/raw-qc-average"
}

combine-qc-details() {
  local sbatch_args="--dependency=afterok:$(get_job_ids 'raw-qc' 'raw-qc-average')"

  sbatch-submit "combine-qc-details" \
    "${sbatch_args} --mem=16G --cpus-per-task=2 --time=0-01:00:00" \
    "${BASE}/sbatch/combine-qc-details"
}

sample-filter() {
  local sbatch_args="--dependency=afterok:$(get_job_ids 'combine-qc-details')"

  sbatch-submit "sample-filter-qc" \
    "${sbatch_args} --mem=32G --cpus-per-task=4 --time=0-01:00:00" \
    "${BASE}/bin/run-R" \
      ${BASE}/code/BeadArray_sample_filter.R \
      ${WORK_DIR}/raw-qc/combined \
      raw-qc-details.txt

  sbatch-submit "sample-filter-qc-average" \
    "${sbatch_args} --mem=32G --cpus-per-task=4 --time=0-01:00:00" \
    "${BASE}/bin/run-R" \
      ${BASE}/code/BeadArray_sample_filter.R \
      ${WORK_DIR}/raw-qc-average/combined \
      raw-qc-details.txt
}

copy-filtered-data() {
  local sbatch_args="--dependency=afterok:$(get_job_ids 'sample-filter-qc' 'sample-filter-qc-average')"

  sbatch-submit "copy-filtered-data" \
    "${sbatch_args} --mem=32G --cpus-per-task=4 --time=0-01:00:00" \
    "${BASE}/sbatch/copy-filtered-data"
}

run-methods-step-1() {
  local sbatch_args="--dependency=afterok:$(get_job_ids 'copy-filtered-data')"

  sbatch-submit "copy-filtered-data" \
    "${sbatch_args} --mem=32G --cpus-per-task=4 --time=0-08:00:00" \
    "${BASE}/sbatch/copy-filtered-data"

}

install-R-libs() {
  if ! [[ -d ${R_LIBS} ]]; then
    mkdir -p ${R_LIBS}
    ${BASE}/bin/run-R ${BASE}/bin/util/install-R-libs.R
  fi
}

#-------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------

run "install-R-libs" # done

run "generate-raw-chip-list" # done

run "copy-raw-data" # done

run "run-raw-qc" # done

run "combine-qc-details" # done

run "sample-filter" # done

run "copy-filtered-data" # done

run "run-methods-step-1"

run "combine-expression-data" # all, donor, wo-donor

run "run-methods-step-2"


#cat $(chip_list) | bin/slurm-submit-array bin/run-R-chips-qc code/BeadArray_qc.R
#at $(chip_list) | bin/slurm-submit-array bin/run-R-chips-qc code/BeadArray_qc_average.R

# stage-2: combine-qc combine-qc-average run-sample-filter copy-filtered-data
#
# stage-3: run-approach-a-step-1 run-method-n-step-1
#
# stage-4: combine-expression
#
# stage-5:
# 	$(base)/step/normalization-step-2
#
#
# copy-raw-data:
#
# combine-qc:
#
# combine-qc-average:
# 	cat static/qc_header.txt > tmp/work/BeadArray_qc_average.R/combined/raw-qc-details.txt
# 	find tmp/work/BeadArray_qc_average.R/chip -name '*_raw_qc_details.txt' \
# 		| xargs -n1 -I{} cat {} >> tmp/work/BeadArray_qc_average.R/combined/raw-qc-details.txt
#
# combine-expression:
# 	bin/util/combine-expression
#
# run-sample-filter:
# 	bin/run-sample-filter $$(pwd)/tmp/work/BeadArray_qc.R/combined raw-qc-details.txt
# 	bin/run-sample-filter $$(pwd)/tmp/work/BeadArray_qc_average.R/combined raw-qc-details.txt
# 	sed -n '2,$$p' tmp/work/BeadArray_qc.R/combined/exclude_sample_list.txt | awk '{ print $$1 }' | sort -u > tmp/sample-filter-qc.txt
# 	sed -n '2,$$p' tmp/work/BeadArray_qc_average.R/combined/exclude_sample_list.txt | awk '{ print $$1 }' | sort -u > tmp/sample-filter-qc-average.txt
# 	-diff tmp/sample-filter-qc.txt tmp/sample-filter-qc-average.txt
#
# copy-filtered-data:
# 	cat tmp/sample-filter-qc.txt tmp/sample-filter-qc-average.txt | sort -u > $(filtered_data_exclude_patterns)
# 	bin/util/copy-data $(chip_list) $(filtered_data_exclude_patterns) $(raw_data_dir) $(filtered_data_dir)
#
# run-approach-a-step-1:
# 	ls $(filtered_data_dir) | bin/slurm-submit-array \
# 			bin/run-R-chips-qc-results \
# 			code/BeadArray_approach_a_step_1.R
#
# run-method-n-step-1:
# 	for n in {1..5}; do \
# 	 ls $(filtered_data_dir) | bin/slurm-submit-array \
# 			bin/run-R-chips-results \
# 			code/BeadArray_method_$${n}_step_1.R; \
# 			sleep 10; done
#
# clean:
# 	-rm -rf tmp/work tmp/log tmp/slurm-array
#
# cancel-all:
# 	scancel -p$(slurm_partition) --signal=9 --full --user $$LOGNAME
#
# test-transform-cols-added:
# 	mkdir -p tmp/test/transform-cols-added
# 	bin/util/transform-cols-added test/transform-cols-added/input.tsv \
# 		test/transform-cols-added/exclude-data-filtered.txt > tmp/test/transform-cols-added/output.tsv
# 	diff tmp/test/transform-cols-added/output.tsv test/transform-cols-added/expected.tsv
#
# test-fix-data:
# 	mkdir -p tmp/test/combine-expression
# 	for n in 123 456 789; do \
# 		echo test/fix-data/input/$${n}-control-expression.txt; done \
# 		| bin/util/fix-data > tmp/test/combined-control-expression.txt
# 	diff tmp/test/combined-control-expression.txt test/fix-data/expected/combined-control-expression.txt
#
# q:
# 	squeue -p$(slurm_partition) --user $$LOGNAME
#
# test-array-job:
# 	printf "foo\nbar\n" | SUBMIT_RANDOM_SECONDS="1" bin/slurm-submit-array bin/test-array-job
#
# check-combined-expression:
# 	for script in \
# 		BeadArray_approach_a_step_1.R \
# 		BeadArray_method_1_step_1.R \
# 		BeadArray_method_2_step_1.R \
# 		BeadArray_method_3_step_1.R \
# 		BeadArray_method_4_step_1.R \
# 		BeadArray_method_5_step_1.R; do \
# 			find $(base)/tmp/work/$${script}/combined -type f | xargs ls -l; done
#
#
# # combine: combine-qc combine-qc-average
# #
# # test-fix-data:
# # 	mkdir -p tmp/test/fix-data
# # 	bin/fix-data test/fix-data/input/{Avg_Signal.txt,BEAD_STDERR.txt,Avg_NBEADS.txt,Detection_Pval.txt} \
# # 		> tmp/test/fix-data/result.txt
# # 	diff tmp/test/fix-data/result.txt test/fix-data/expected/result.txt
# #
# # test-fix-data-7-cols:
# # 	mkdir -p tmp/test/fix-data
# # 	bin/fix-data test/fix-data/input/{Avg_Signal-7-cols.txt,BEAD_STDERR-7-cols.txt,Avg_NBEADS-7-cols.txt,Detection_Pval-7-cols.txt} \
# #
# # qc:
# # 	bin/util/get-mapinfo -u chip_barcode | bin/slurm-submit code/BeadArray_qc.R
# #
# # qc-average:
# # 	bin/util/get-mapinfo -u chip_barcode | bin/slurm-submit code/BeadArray_qc_average.R
# #
# # test:
# # 	scancel -phii02 --signal=9 --full --user $$LOGNAME --name BeadArray_test
# # 	-rm -rf tmp/{work,log,complete}/BeadArray_test &
# # 	sleep 10
# # 	bin/util/get-mapinfo -u chip_barcode | sort -R | head -7 | SUBMIT_RANDOM_SECONDS=10 bin/slurm-submit code/BeadArray_test.R
# # 	sleep 10; find tmp/log/BeadArray_test/current/ -type f -name '*.log' | xargs tail -f
# #
# # qc-clean-all:
# # 	-rm -rf tmp/{work,complete}/BeadArray_qc
# #
# # qc-average-clean-all:
# # 	-rm -rf tmp/{work,complete}/BeadArray_qc_average
#
