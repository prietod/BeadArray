#!/usr/bin/env bash

export BASE="$(readlink -f $(dirname "${BASH_SOURCE}")/..)"

source ${BASE}/lib/env.sh
source ${BASE}/lib/util.sh

install-R-libs() {
  if ! [[ -d ${R_LIBS} ]]; then
    mkdir -p ${R_LIBS}
    ${BASE}/bin/run-R ${BASE}/bin/util/install-R-libs.R
  fi
}

generate-raw-chip-list() {
  ensure_dir $(dirname ${RAW_CHIP_LIST})
  if [[ "$TEST_MODE" == 'true' ]]; then
     $BASE/bin/util/generate-chip-list ${JINFINITI_DATA_DIR}/map_info.txt \
       | sort --random-sort | head -8 > ${RAW_CHIP_LIST}
   else
     $BASE/bin/util/generate-chip-list all > ${RAW_CHIP_LIST}
  fi
}

# Copy raw Jinifiti data from the original source directory
#
copy-raw-data() {
  ensure_dir ${RAW_DATA_DIR}
  ${BASE}/bin/util/copy-data ${RAW_CHIP_LIST} ${RAW_DATA_EXCLUDE_PATTERNS} ${JINFINITI_DATA_DIR} ${RAW_DATA_DIR}
}

# Run QC scripts again raw data
#
run-raw-qc() {
  ensure_dir ${WORK_DIR}/raw-qc
  ensure_dir ${WORK_DIR}/raw-qc-average

  local array_count="$(line_count ${RAW_CHIP_LIST})"

  sbatch-submit "raw-qc" \
    "--array=1-${array_count} --mem=16G --cpus-per-task=2 --time=0-04:00:00" \
    "${BASE}/sbatch/raw-qc" "${BASE}/code/BeadArray-qc.R" "${WORK_DIR}/raw-qc"

  sbatch-submit "raw-qc-average" \
    "--array=1-${array_count} --mem=16G --cpus-per-task=2 --time=0-04:00:00" \
    "${BASE}/sbatch/raw-qc" "${BASE}/code/BeadArray-qc-average.R" "${WORK_DIR}/raw-qc-average"
}

combine-qc-details() {
  [[ -z "$DEP_OFF" ]] && local sbatch_args="--dependency=afterok:$(get_job_ids 'raw-qc' 'raw-qc-average')"

  sbatch-submit "combine-qc-details" \
    "${sbatch_args} --mem=16G --cpus-per-task=2 --time=0-01:00:00" \
    "${BASE}/sbatch/combine-qc-details"
}

sample-filter() {
  [[ -z "$DEP_OFF" ]] && local sbatch_args="--dependency=afterok:$(get_job_ids 'combine-qc-details')"

  sbatch-submit "sample-filter-qc" \
    "${sbatch_args} --mem=32G --cpus-per-task=4 --time=0-01:00:00" \
    "${BASE}/bin/run-R" \
      ${BASE}/code/BeadArray-sample-filter.R \
      ${WORK_DIR}/raw-qc/combined \
      raw-qc-details.txt

  sbatch-submit "sample-filter-qc-average" \
    "${sbatch_args} --mem=32G --cpus-per-task=4 --time=0-01:00:00" \
    "${BASE}/bin/run-R" \
      ${BASE}/code/BeadArray-sample-filter.R \
      ${WORK_DIR}/raw-qc-average/combined \
      raw-qc-details.txt
}

copy-filtered-data() {
  [[ -z "$DEP_OFF" ]] && local sbatch_args="--dependency=afterok:$(get_job_ids 'sample-filter-qc' 'sample-filter-qc-average')"

  sbatch-submit "copy-filtered-data" \
    "${sbatch_args} --mem=32G --cpus-per-task=4 --time=0-01:00:00" \
    "${BASE}/sbatch/copy-filtered-data"
}

methods-step-1() {
  [[ -z "$DEP_OFF" ]] && local sbatch_args="--dependency=afterok:$(get_job_ids 'copy-filtered-data')"

  sbatch-submit "submit-methods-step-1" \
    "${sbatch_args} --mem=4G --cpus-per-task=1 --time=0-01:00:00" \
    "${BASE}/sbatch/methods-step-1-submit"
}

combine-expression() {
  [[ -z "$DEP_OFF" ]] && local sbatch_args="--dependency=afterok:$(get_job_ids 'methods-step-1')"

  sbatch-submit "combine-expression" \
    "${sbatch_args} --mem=4G --cpus-per-task=1 --time=0-01:00:00" \
    "${BASE}/sbatch/combine-expression-submit"
}

generate-phenotype-details() {
  [[ -z "$DEP_OFF" ]] && local sbatch_args="--dependency=afterok:$(get_job_ids 'combine-expression')"

  sbatch-submit "generate-phenotype-details" \
    "${sbatch_args} --mem=32G --cpus-per-task=2 --time=0-01:00:00" \
    "${BASE}/sbatch/generate-phenotype-details"
}

methods-step-2() {
  for dataset in ${DATASETS}; do
    for method in ${METHODS}; do
      /bin/cp \
        ${WORK_DIR}/common/BeadArray_phenotype_details-${dataset}.txt \
        ${WORK_DIR}/method-${method}-step-1-${dataset}/combined/BeadArray_phenotype_details.txt

      sbatch-submit "method-${method}-step-2-${dataset}" \
        "--mem=120G --cpus-per-task=4 --time=7-00:00:00" \
        "${BASE}/bin/run-R" \
        "${BASE}/code/BeadArray-method-${method}-step-2.R" \
        "${WORK_DIR}/method-${method}-step-1-${dataset}/combined"
    done
  done
}

main() {

  #------------------------------------------------------------------------------------
  # Install supporting R libraries in $R_LIBS (bioconductor.org w/ lumi and beadarray)
  #------------------------------------------------------------------------------------

  run "install-R-libs"

  #------------------------------------------------------------------------------------
  # Generate a simple list of chip barcodes from the metadata file provided by Jinifiti
  #
  # input:
  #   ${JINFINITI_DATA_DIR}/map_info.txt
  #
  # output:
  #   ${RAW_CHIP_LIST} # default: "${BASE}/tmp/work/common/chip-list-raw.txt"
  #
  #------------------------------------------------------------------------------------

  run "generate-raw-chip-list"

  #------------------------------------------------------------------------------------
  # Name: copy-raw-data
  #
  # Description: Copy each <chip>-<array> into a raw data folder based on <chip>
  #
  # Parameters:
  #   - ${RAW_CHIP_LIST}              # default: "${BASE}/tmp/work/common/chip-list-raw.txt"
  #   - ${RAW_DATA_EXCLUDE_PATTERNS}  # default: "${BASE}/static/exclude-data-raw.txt"
  #   - ${JINFINITI_DATA_DIR}         # default: "/hiidata/teddy/data/jinfiniti/gene_expression"
  #   - ${RAW_DATA_DIR}               # default: "${BASE}/tmp/data/raw"
  #
  # Mutation:
  #   - Populates RAW_DATA_DIR w/ the appropriate <chip>/<prefix>_<array>[_<suffix>].<ext> files.
  #
  #------------------------------------------------------------------------------------

  run "copy-raw-data"

  #------------------------------------------------------------------------------------
  # Run raw-qc and raw-qc-average R Scripts to determine quality
  #------------------------------------------------------------------------------------

  run "run-raw-qc"

  #------------------------------------------------------------------------------------
  # Combine individual chip QC scores for each qc method into aggregate files
  #------------------------------------------------------------------------------------

  run "combine-qc-details"

  #------------------------------------------------------------------------------------
  # Run R script to generate a list of <chip>_<array> candidates to remove due to
  # qc scoring.
  #------------------------------------------------------------------------------------

  run "sample-filter"

  #------------------------------------------------------------------------------------
  # Copy over <chip>_<array> files which passed QC into all, donor, and non-donor
  # filtered data folders.
  #------------------------------------------------------------------------------------

  run "copy-filtered-data"

  #------------------------------------------------------------------------------------
  # Submit method-a-step1, method-b-step-1, etc. for all, donor, and non-donor filtered
  # data folders.
  #------------------------------------------------------------------------------------

  run "methods-step-1"

  #------------------------------------------------------------------------------------
  # Combine expression files for each chip for each method-a-step1, method-b-step-1,
  # etc. for all, donor, and non-donor filtered data folders.
  #------------------------------------------------------------------------------------

  run "combine-expression"

  #------------------------------------------------------------------------------------
  # Generate phenotype_details files for all, donor, and non-donor for methods-step-2
  #------------------------------------------------------------------------------------

  run "generate-phenotype-details"

  #------------------------------------------------------------------------------------
  # methods-step-2
  #------------------------------------------------------------------------------------

  run "methods-step-2"
}


#------------------------------------------------------------------------------------
# Main
#------------------------------------------------------------------------------------

if [[ $# -gt 0 ]]; then
  for name in "$@"; do
    [[ -f ${STATE_DIR}/${name} ]] && /bin/rm ${STATE_DIR}/${name}
    run "$name"
  done
else
  main
fi
